-- CREATE VIRTUAL TABLE <name> USING rtree( <column_names> );

.separator "\t"

DROP TABLE IF EXISTS poi;
DROP TABLE IF EXISTS poi_tag;
DROP TABLE IF EXISTS projected_poi;

CREATE TABLE poi( id INT PRIMARY KEY,
                  uid INT,
                  lat FLOAT,
                  lon FLOAT );

CREATE TABLE poi_tag( id INT REFERENCES poi( id ),
                      key TEXT,
                      value TEXT );

.schema

.import poi.tsv poi
.import poi_tag.tsv poi_tag

 CREATE VIRTUAL TABLE projected_poi USING rtree(
     id,
     minX, maxX,
     minY, maxY );

.schema

-- From forums: 1 degree lat = 111191m => 10m = 10/111191 degrees lat
-- From forums: 1 degree long = 74539m => 10m = 10/74539 degrees long
INSERT INTO projected_poi
    SELECT id, 
           (lat - 48.06) * (1000/.189), 
           ((lat - 48.06 + (10/111191)) * (1000/.189)), 
           (lon - 11.358) * (1000/.366), 
           ((lon - 11.358 + (10/74539)) * (1000/.366))
    FROM poi;

-- Q4 TEST
-- DROP TABLE IF EXISTS bounded_by_rect;
-- CREATE TABLE bounded_by_rect AS 
--     SELECT  id 
--     FROM projected_poi ppoi
--     WHERE minX >= 0
--       AND maxX <= 1000
--       AND minY >= 0
--       AND maxY <= 1000;

-- SELECT pt.id, pt2.
-- FROM bounded_by_rect bbr, poi_tag pt, poi_tag pt2
-- WHERE bbr.id = pt.id
--   AND pt2.id = pt.id
--   AND key = "class"
--   AND value = "hotel";

DROP INDEX IF EXISTS poi_index;
DROP TABLE IF EXISTS projected_poi_regTable;

CREATE TABLE projected_poi_regTable AS
    SELECT id,
           (lat - 48.06) * (1000/.189) as minX, 
           ((lat - 48.06 + (10/111191)) * (1000/.189)) as maxX, 
           (lon - 11.358) * (1000/.366) as minY, 
           ((lon - 11.358 + (10/74539)) * (1000/.366)) as maxY
    FROM poi;

-- Q5 TEST
CREATE INDEX poi_index ON projected_poi_regTable( minX, maxX, minY, maxY );

SELECT * 
FROM projected_poi_regTable 
WHERE minX > 100 AND maxX < 200 AND minY > 100 AND maxY < 200;


